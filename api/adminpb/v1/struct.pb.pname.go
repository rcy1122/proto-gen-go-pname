// Code generated by protoc-gen-go-pname. DO NOT EDIT.
// versions:
// 	protoc-gen-go-pname v0.0.1
// 	protoc        v3.19.1
// source: adminpb/v1/struct.proto

package v1

import (
	"strconv"
	"sync"
)

var changeFree = sync.Pool{
	New: func() interface{} { return new(Change) },
}

func NewChange() *Change {
	return changeFree.Get().(*Change)
}

type Change struct {
	Property string `json:"property,omitempty"`
	Value    string `json:"value,omitempty"`
	Exist    bool   `json:"exist,omitempty"`
}

func (c *Change) SetProperty(v string) *Change {
	c.Property = v
	return c
}

func (c *Change) SetStringP(v *string) *Change {
	if v != nil {
		c.SetString(*v)
	}
	return c
}

func (c *Change) SetString(v string) *Change {
	c.Exist = true
	c.Value = v
	return c
}

func (c *Change) SetInt64P(v *int64) *Change {
	if v != nil {
		c.SetInt64(*v)
	}
	return c
}

func (c *Change) SetInt64(v int64) *Change {
	c.Exist = true
	c.Value = strconv.Itoa(int(v))
	return c
}

func (c *Change) Free() {
	c.Property = ""
	c.Value = ""
	c.Exist = false
	changeFree.Put(c)
}

func (x *Service) Change() []*Change {
	out := make([]*Change, 0)
	if x.Id != nil {
		out = append(out, NewChange().SetProperty("Id").SetInt64P(x.Id))
	}
	if x.Name != nil {
		out = append(out, NewChange().SetProperty("Name").SetStringP(x.Name))
	}
	out = append(out, NewChange().SetProperty("User").SetString(x.User))
	return out
}

func (x *User) Change() []*Change {
	out := make([]*Change, 0)
	if x.Id != nil {
		out = append(out, NewChange().SetProperty("Id").SetInt64P(x.Id))
	}
	if x.Name != nil {
		out = append(out, NewChange().SetProperty("Name").SetStringP(x.Name))
	}
	out = append(out, NewChange().SetProperty("User").SetString(x.User))
	return out
}
